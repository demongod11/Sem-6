| Rule: type_specifier => void |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: direct_declarator =>  direct_declarator ( identifier_list_opt ) |
| Rule: declarator => pointer_opt direct_declarator |

#################### LINE NO : 2 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => relational_expression > shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |

#################### LINE NO : 3 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression =>  additive_expression - multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item |

#################### LINE NO : 4 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression =>  multiplicative_expression * cast_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression =>  multiplicative_expression / cast_expression|
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |
| Rule: primary_expression => Parenthesis Expression |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression =>  multiplicative_expression / cast_expression|
| Rule: additive_expression =>  additive_expression + multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: init_declarator => declarator = initializer |
| Rule: init_declarator_list => init_declarator |
| Rule: declaration => declaration_specifiers init_declarator_list_opt ; |
| Rule: block_item => declaration |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 5 ####################
| Rule: compound_statement => { block_item_list_opt } |
| Rule: statement => compound_statement|

#################### LINE NO : 6 ####################

#################### LINE NO : 7 ####################
| Rule: selection_statement => if ( expression ) statement |
| Rule: statement => selection_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => relational_expression < shift_expression|
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |

#################### LINE NO : 8 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression =>  additive_expression + multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item |

#################### LINE NO : 9 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression =>  multiplicative_expression / cast_expression|
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |
| Rule: primary_expression => Parenthesis Expression |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression =>  multiplicative_expression * cast_expression |
| Rule: additive_expression =>  additive_expression - multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: init_declarator => declarator = initializer |
| Rule: init_declarator_list => init_declarator |
| Rule: declaration => declaration_specifiers init_declarator_list_opt ; |
| Rule: block_item => declaration |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 10 ####################
| Rule: compound_statement => { block_item_list_opt } |
| Rule: statement => compound_statement|

#################### LINE NO : 11 ####################

#################### LINE NO : 12 ####################
| Rule: selection_statement => if ( expression ) statement |
| Rule: statement => selection_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item_list block_item |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression =>  equality_expression == relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |

#################### LINE NO : 13 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression =>  additive_expression + multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item |

#################### LINE NO : 14 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression =>  multiplicative_expression * cast_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression =>  multiplicative_expression / cast_expression|
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |
| Rule: primary_expression => Parenthesis Expression |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression =>  multiplicative_expression * cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |
| Rule: primary_expression => Parenthesis Expression |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression =>  multiplicative_expression * cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 15 ####################
| Rule: compound_statement => { block_item_list_opt } |
| Rule: statement => compound_statement|

#################### LINE NO : 16 ####################
| Rule: selection_statement => if ( expression ) statement |
| Rule: statement => selection_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item_list block_item |
| Rule: compound_statement => { block_item_list_opt } |
| Rule: function_definition => declaration_specifiers declarator declaration_list_opt compound_statement |
| Rule: external_declaration => function_definition |
| Rule: translation_unit => external_declaration|

#################### LINE NO : 17 ####################

#################### LINE NO : 18 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: parameter_declaration => declaration_specifiers declarator |
| Rule: parameter_list => parameter_declaration |
| Rule: parameter_type_list => parameter_list |
| Rule: direct_declarator =>  direct_declarator ( parameter_type_list ) |

#################### LINE NO : 19 ####################
| Rule: declarator => pointer_opt direct_declarator |

#################### LINE NO : 20 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => relational_expression > shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |

#################### LINE NO : 22 ####################

#################### LINE NO : 23 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression =>  multiplicative_expression * cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item |

#################### LINE NO : 24 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |
| Rule: jump_statement => return expression_opt ; |
| Rule: statement => jump_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 25 ####################
| Rule: compound_statement => { block_item_list_opt } |
| Rule: statement => compound_statement|

#################### LINE NO : 26 ####################

#################### LINE NO : 27 ####################

#################### LINE NO : 28 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression =>  additive_expression + multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |
| Rule: jump_statement => return expression_opt ; |
| Rule: statement => jump_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item |

#################### LINE NO : 29 ####################
| Rule: compound_statement => { block_item_list_opt } |
| Rule: statement => compound_statement|
| Rule: selection_statement => if ( expression ) statement else statement |
| Rule: statement => selection_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item |

#################### LINE NO : 30 ####################
| Rule: compound_statement => { block_item_list_opt } |
| Rule: function_definition => declaration_specifiers declarator declaration_list_opt compound_statement |
| Rule: external_declaration => function_definition |
| Rule: translation_unit => translation_unit external_declaration |

#################### LINE NO : 31 ####################

#################### LINE NO : 32 ####################

#################### LINE NO : 33 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: direct_declarator =>  direct_declarator ( identifier_list_opt ) |

#################### LINE NO : 34 ####################
| Rule: declarator => pointer_opt direct_declarator |

#################### LINE NO : 35 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: unary_expression => - |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: unary_expression => unary_operator cast_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: init_declarator => declarator = initializer |
| Rule: init_declarator_list => init_declarator |
| Rule: declaration => declaration_specifiers init_declarator_list_opt ; |
| Rule: block_item => declaration |
| Rule: block_item_list => block_item |

#################### LINE NO : 38 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: init_declarator => declarator = initializer |
| Rule: init_declarator_list => init_declarator |
| Rule: declaration => declaration_specifiers init_declarator_list_opt ; |
| Rule: block_item => declaration |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 39 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: constant => CHARACTER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: init_declarator => declarator = initializer |
| Rule: init_declarator_list => init_declarator |
| Rule: declaration => declaration_specifiers init_declarator_list_opt ; |
| Rule: block_item => declaration |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 40 ####################

#################### LINE NO : 41 ####################

#################### LINE NO : 42 ####################

******************* Multi Line Comment Starts at Line = 43 *******************

---------------------  Comment at Line = 44  ------------------

******************* Multi Line Comment Ends at Line = 44 *******************

#################### LINE NO : 45 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: constant => CHARACTER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: init_declarator => declarator = initializer |
| Rule: init_declarator_list => init_declarator |
| Rule: declaration => declaration_specifiers init_declarator_list_opt ; |
| Rule: block_item => declaration |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 46 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: direct_declarator =>  direct_declarator [  type_qualifier_list_opt assignment_expression_opt ] |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: primary_expression => STRING LITERAL |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: init_declarator => declarator = initializer |
| Rule: init_declarator_list => init_declarator |
| Rule: declaration => declaration_specifiers init_declarator_list_opt ; |
| Rule: block_item => declaration |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 47 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: direct_declarator =>  direct_declarator [  type_qualifier_list_opt assignment_expression_opt ] |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: init_declarator => declarator |
| Rule: init_declarator_list => init_declarator |
| Rule: declaration => declaration_specifiers init_declarator_list_opt ; |
| Rule: block_item => declaration |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 48 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: init_declarator => declarator = initializer |
| Rule: init_declarator_list => init_declarator |
| Rule: declaration => declaration_specifiers init_declarator_list_opt ; |
| Rule: block_item => declaration |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 49 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: init_declarator => declarator = initializer |
| Rule: init_declarator_list => init_declarator |
| Rule: declaration => declaration_specifiers init_declarator_list_opt ; |
| Rule: block_item => declaration |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 50 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => relational_expression < shift_expression|
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression =>  additive_expression - multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |

#################### LINE NO : 51 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |
| Rule: postfix_expression => postfix_expression [expression] |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression =>  additive_expression + multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item |

#################### LINE NO : 52 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 53 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |
| Rule: postfix_expression => postfix_expression [expression] |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 54 ####################
| Rule: compound_statement => { block_item_list_opt } |
| Rule: statement => compound_statement|
| Rule: iteration_statement => for ( expression_opt ; expression_opt ; expression_opt ) statement |
| Rule: statement => iteration_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 55 ####################

#################### LINE NO : 56 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression =>  additive_expression + multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 58 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: pointer => * type_qualifier_list_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: unary_expression => & |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: unary_expression => unary_operator cast_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: init_declarator => declarator = initializer |
| Rule: init_declarator_list => init_declarator |
| Rule: declaration => declaration_specifiers init_declarator_list_opt ; |
| Rule: block_item => declaration |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 59 ####################

#################### LINE NO : 60 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: init_declarator => declarator = initializer |
| Rule: init_declarator_list => init_declarator |
| Rule: declaration => declaration_specifiers init_declarator_list_opt ; |
| Rule: block_item => declaration |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 61 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => relational_expression <= shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression =>  additive_expression + multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |

#################### LINE NO : 63 ####################

#################### LINE NO : 64 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression =>  multiplicative_expression modulo cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression =>  equality_expression == relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |

#################### LINE NO : 65 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |

#################### LINE NO : 66 ####################

#################### LINE NO : 67 ####################

#################### LINE NO : 68 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression =>  additive_expression + multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item |

#################### LINE NO : 69 ####################
| Rule: compound_statement => { block_item_list_opt } |
| Rule: statement => compound_statement|
| Rule: selection_statement => if ( expression ) statement else statement |
| Rule: statement => selection_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item |

#################### LINE NO : 70 ####################
| Rule: compound_statement => { block_item_list_opt } |
| Rule: statement => compound_statement|
| Rule: iteration_statement => for ( expression_opt ; expression_opt ; expression_opt ) statement |
| Rule: statement => iteration_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 71 ####################

#################### LINE NO : 72 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression =>  equality_expression == relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |
| Rule: primary_expression => Parenthesis Expression |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: conditional_expression =>  logical_OR_expression ? expression : conditional_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 74 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => logical_AND_expression && inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 75 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression =>  additive_expression + multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 76 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: pointer => * type_qualifier_list_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: unary_expression => & |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: unary_expression => unary_operator cast_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: init_declarator => declarator = initializer |
| Rule: init_declarator_list => init_declarator |
| Rule: declaration => declaration_specifiers init_declarator_list_opt ; |
| Rule: block_item => declaration |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 77 ####################

#################### LINE NO : 78 ####################
| Rule: type_specifier => int |
| Rule: declaration_specifiers => type_specifier declaration_specifiers_opt |
| Rule: direct_declarator => IDENTIFIER |
| Rule: declarator => pointer_opt direct_declarator |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: init_declarator => declarator = initializer |
| Rule: init_declarator_list => init_declarator |
| Rule: declaration => declaration_specifiers init_declarator_list_opt ; |
| Rule: block_item => declaration |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 79 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => relational_expression <= shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression =>  additive_expression + multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |

#################### LINE NO : 81 ####################

#################### LINE NO : 82 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression =>  multiplicative_expression modulo cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression =>  equality_expression == relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: expression => assignment_expression |

#################### LINE NO : 83 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |

#################### LINE NO : 84 ####################

#################### LINE NO : 85 ####################

#################### LINE NO : 86 ####################
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: assignment_operator => = |
| Rule: primary_expression => IDENTIFIER|
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression => multiplicative_expression |
| Rule: constant => INTEGER|
| Rule: primary_expression => constant |
| Rule: postfix_expression => primary_expression |
| Rule: unary_expression => postfix_expression |
| Rule: cast_expression => unary_expression |
| Rule: multiplicative_expression => cast_expression |
| Rule: additive_expression =>  additive_expression + multiplicative_expression |
| Rule: shift_expression => additive_expression |
| Rule: relational_expression => shift_expression |
| Rule: equality_expression => relational_expression |
| Rule: AND_expression => equality_expression |
| Rule: exclusive_OR_expression => AND_expression |
| Rule: inclusive_OR_expression => exclusive_OR_expression |
| Rule: logical_AND_expression => inclusive_OR_expression |
| Rule: logical_OR_expression => logical_AND_expression |
| Rule: conditional_expression => logical_OR_expression |
| Rule: assignment_expression => conditional_expression |
| Rule: assignment_expression =>  unary_expression assignment_operator assignment_expression |
| Rule: expression => assignment_expression |
| Rule: expression_statement => expression_opt ; |
| Rule: statement => expression_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item |

#################### LINE NO : 87 ####################
| Rule: compound_statement => { block_item_list_opt } |
| Rule: statement => compound_statement|
| Rule: selection_statement => if ( expression ) statement else statement |
| Rule: statement => selection_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item |

#################### LINE NO : 88 ####################
| Rule: compound_statement => { block_item_list_opt } |
| Rule: statement => compound_statement|
| Rule: iteration_statement => for ( expression_opt ; expression_opt ; expression_opt ) statement |
| Rule: statement => iteration_statement |
| Rule: block_item => statement |
| Rule: block_item_list => block_item_list block_item |

#################### LINE NO : 89 ####################

#################### LINE NO : 90 ####################
| Rule: compound_statement => { block_item_list_opt } |
| Rule: function_definition => declaration_specifiers declarator declaration_list_opt compound_statement |
| Rule: external_declaration => function_definition |
| Rule: translation_unit => translation_unit external_declaration |
