< KEYWORD: VOID, 8, void >
< IDENTIFIER: 101, specialfunction>
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: CURLY OPEN BRACKET, 51, { >
< KEYWORD: IF, 22, if >
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: GREATER THAN, 68, > >
< CONSTANT: INTEGER, 103, 0>
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: CURLY OPEN BRACKET, 51, { >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: SUBTRACT, 60, - >
< CONSTANT: INTEGER, 103, 2>
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: INT, 30, int >
< IDENTIFIER: 101, x1>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: ADD, 59, + >
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< IDENTIFIER: 101, f1>
< PUNCTUATOR: MULTIPLY, 58, * >
< CONSTANT: INTEGER, 103, 101>
< PUNCTUATOR: DIVISION, 63, / >
< CONSTANT: INTEGER, 103, 37>
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: DIVISION, 63, / >
< CONSTANT: INTEGER, 103, 45>
< PUNCTUATOR: LINEEND, 79, ; >
< PUNCTUATOR: CURLY CLOSE BRACKET, 52, } >
< KEYWORD: IF, 22, if >
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: LESS THAN, 67, < >
< CONSTANT: INTEGER, 103, 0>
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: CURLY OPEN BRACKET, 51, { >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, func_count>
< CONSTANT: INTEGER, 103, +10>
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: INT, 30, int >
< IDENTIFIER: 101, x2>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: SUBTRACT, 60, - >
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< IDENTIFIER: 101, f1>
< PUNCTUATOR: DIVISION, 63, / >
< CONSTANT: INTEGER, 103, 34>
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: MULTIPLY, 58, * >
< CONSTANT: INTEGER, 103, 465>
< PUNCTUATOR: LINEEND, 79, ; >
< PUNCTUATOR: CURLY CLOSE BRACKET, 52, } >
< KEYWORD: IF, 22, if >
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: EQUATE, 71, == >
< CONSTANT: INTEGER, 103, 0>
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: CURLY OPEN BRACKET, 51, { >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, func_count>
< CONSTANT: INTEGER, 103, +1>
< PUNCTUATOR: LINEEND, 79, ; >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: MULTIPLY, 58, * >
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< CONSTANT: INTEGER, 103, 23>
< PUNCTUATOR: MULTIPLY, 58, * >
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< IDENTIFIER: 101, f1>
< PUNCTUATOR: MULTIPLY, 58, * >
< CONSTANT: INTEGER, 103, 1>
< PUNCTUATOR: DIVISION, 63, / >
< CONSTANT: INTEGER, 103, 1000>
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: LINEEND, 79, ; >
< PUNCTUATOR: CURLY CLOSE BRACKET, 52, } >
< PUNCTUATOR: CURLY CLOSE BRACKET, 52, } >
< KEYWORD: INT, 30, int >
< IDENTIFIER: 101, myfunc2>
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< KEYWORD: INT, 30, int >
< IDENTIFIER: 101, var>
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: CURLY OPEN BRACKET, 51, { >
Single Line Comment
< KEYWORD: IF, 22, if >
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< IDENTIFIER: 101, var>
< PUNCTUATOR: GREATER THAN, 68, > >
< CONSTANT: INTEGER, 103, 30>
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: CURLY OPEN BRACKET, 51, { >
< IDENTIFIER: 101, var>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, var>
< PUNCTUATOR: MULTIPLY, 58, * >
< CONSTANT: INTEGER, 103, 13>
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: RETURN, 7, return >
< IDENTIFIER: 101, var>
< PUNCTUATOR: LINEEND, 79, ; >
< PUNCTUATOR: CURLY CLOSE BRACKET, 52, } >
< KEYWORD: ELSE, 35, else >
< PUNCTUATOR: CURLY OPEN BRACKET, 51, { >
< KEYWORD: RETURN, 7, return >
< IDENTIFIER: 101, var>
< PUNCTUATOR: ADD, 59, + >
< CONSTANT: INTEGER, 103, 203>
< PUNCTUATOR: LINEEND, 79, ; >
< PUNCTUATOR: CURLY CLOSE BRACKET, 52, } >
< PUNCTUATOR: CURLY CLOSE BRACKET, 52, } >
< KEYWORD: INT, 30, int >
< IDENTIFIER: 101, main>
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: CURLY OPEN BRACKET, 51, { >
Single Line Comment
Single Line Comment
< KEYWORD: INT, 30, int >
< IDENTIFIER: 101, x1>
< PUNCTUATOR: EQUAL, 39, = >
< CONSTANT: INTEGER, 103, -234>
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: INT, 30, int >
< IDENTIFIER: 101, _underscore>
< PUNCTUATOR: EQUAL, 39, = >
< CONSTANT: INTEGER, 103, 34>
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: CHAR, 13, char >
< IDENTIFIER: 101, c>
< PUNCTUATOR: EQUAL, 39, = >
< CONSTANT: CHARACTER, 104, 'a'>
< PUNCTUATOR: LINEEND, 79, ; >
Single Line Comment
Multi Line Comment
< KEYWORD: CHAR, 13, char >
< IDENTIFIER: 101, char_literal>
< PUNCTUATOR: EQUAL, 39, = >
< CONSTANT: CHARACTER, 104, '#'>
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: CHAR, 13, char >
< IDENTIFIER: 101, string_literal>
< PUNCTUATOR: SQUARE OPEN BRACKET, 47, [ >
< CONSTANT: INTEGER, 103, 100>
< PUNCTUATOR: SQUARE CLOSE BRACKET, 48, ] >
< PUNCTUATOR: EQUAL, 39, = >
< STRING_LITERAL: 105, "this will test string literals. Bison is so cool!! escape \' \\">
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: INT, 30, int >
< IDENTIFIER: 101, fibonacci>
< PUNCTUATOR: SQUARE OPEN BRACKET, 47, [ >
< CONSTANT: INTEGER, 103, 10>
< PUNCTUATOR: SQUARE CLOSE BRACKET, 48, ] >
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: INT, 30, int >
< IDENTIFIER: 101, a0>
< PUNCTUATOR: EQUAL, 39, = >
< CONSTANT: INTEGER, 103, 0>
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: INT, 30, int >
< IDENTIFIER: 101, a1>
< PUNCTUATOR: EQUAL, 39, = >
< CONSTANT: INTEGER, 103, 1>
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: FOR, 14, for >
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< IDENTIFIER: 101, i>
< PUNCTUATOR: EQUAL, 39, = >
< CONSTANT: INTEGER, 103, 9>
< PUNCTUATOR: LINEEND, 79, ; >
< IDENTIFIER: 101, i>
< PUNCTUATOR: LESS THAN, 67, < >
< CONSTANT: INTEGER, 103, 10>
< PUNCTUATOR: LINEEND, 79, ; >
< IDENTIFIER: 101, i>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, i>
< CONSTANT: INTEGER, 103, -1>
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: CURLY OPEN BRACKET, 51, { >
< IDENTIFIER: 101, fibonacci>
< PUNCTUATOR: SQUARE OPEN BRACKET, 47, [ >
< IDENTIFIER: 101, i>
< PUNCTUATOR: SQUARE CLOSE BRACKET, 48, ] >
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, a0>
< PUNCTUATOR: ADD, 59, + >
< IDENTIFIER: 101, a1>
< PUNCTUATOR: LINEEND, 79, ; >
< IDENTIFIER: 101, a0>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, a1>
< PUNCTUATOR: LINEEND, 79, ; >
< IDENTIFIER: 101, a1>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, fibonacci>
< PUNCTUATOR: SQUARE OPEN BRACKET, 47, [ >
< IDENTIFIER: 101, var2>
< PUNCTUATOR: SQUARE CLOSE BRACKET, 48, ] >
< PUNCTUATOR: LINEEND, 79, ; >
< PUNCTUATOR: CURLY CLOSE BRACKET, 52, } >
Single Line Comment
< IDENTIFIER: 101, var2>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, var2>
< PUNCTUATOR: ADD, 59, + >
< CONSTANT: INTEGER, 103, 4>
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: INT, 30, int >
< PUNCTUATOR: MULTIPLY, 58, * >
< IDENTIFIER: 101, p1>
< PUNCTUATOR: EQUAL, 39, = >
< PUNCTUATOR: AND, 57, & >
< IDENTIFIER: 101, var2>
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: INT, 30, int >
< IDENTIFIER: 101, _varX>
< PUNCTUATOR: EQUAL, 39, = >
< CONSTANT: INTEGER, 103, 0>
< PUNCTUATOR: LINEEND, 79, ; >
Single Line Comment
< KEYWORD: FOR, 14, for >
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< IDENTIFIER: 101, _varX>
< PUNCTUATOR: EQUAL, 39, = >
< CONSTANT: INTEGER, 103, 0>
< PUNCTUATOR: LINEEND, 79, ; >
< IDENTIFIER: 101, _varX>
< PUNCTUATOR: LESS THAN EQUAL, 69, <= >
< CONSTANT: INTEGER, 103, 1023>
< PUNCTUATOR: LINEEND, 79, ; >
< IDENTIFIER: 101, _varX>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, _varX>
< CONSTANT: INTEGER, 103, +1>
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: CURLY OPEN BRACKET, 51, { >
< KEYWORD: IF, 22, if >
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: MOD, 64, % >
< CONSTANT: INTEGER, 103, 33>
< PUNCTUATOR: EQUATE, 71, == >
< CONSTANT: INTEGER, 103, 12>
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: EQUAL, 39, = >
< CONSTANT: INTEGER, 103, 20>
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: ELSE, 35, else >
< PUNCTUATOR: CURLY OPEN BRACKET, 51, { >
< IDENTIFIER: 101, var2>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, var2>
< PUNCTUATOR: ADD, 59, + >
< CONSTANT: INTEGER, 103, 1>
< PUNCTUATOR: LINEEND, 79, ; >
< PUNCTUATOR: CURLY CLOSE BRACKET, 52, } >
< PUNCTUATOR: CURLY CLOSE BRACKET, 52, } >
Single Line Comment
< IDENTIFIER: 101, _underscore>
< PUNCTUATOR: EQUAL, 39, = >
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< IDENTIFIER: 101, var2>
< PUNCTUATOR: EQUATE, 71, == >
< CONSTANT: INTEGER, 103, 0>
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: QUESTION, 77, ? >
< CONSTANT: INTEGER, 103, 1>
< PUNCTUATOR: COLON, 78, : >
< CONSTANT: INTEGER, 103, 2>
< PUNCTUATOR: LINEEND, 79, ; >
< IDENTIFIER: 101, var2>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, _underscore>
< PUNCTUATOR: DOUBLE AND, 75, && >
< IDENTIFIER: 101, x1>
< PUNCTUATOR: LINEEND, 79, ; >
< IDENTIFIER: 101, var2>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, var2>
< PUNCTUATOR: ADD, 59, + >
< CONSTANT: INTEGER, 103, 4>
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: INT, 30, int >
< PUNCTUATOR: MULTIPLY, 58, * >
< IDENTIFIER: 101, p1>
< PUNCTUATOR: EQUAL, 39, = >
< PUNCTUATOR: AND, 57, & >
< IDENTIFIER: 101, var2>
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: INT, 30, int >
< IDENTIFIER: 101, _varX>
< PUNCTUATOR: EQUAL, 39, = >
< CONSTANT: INTEGER, 103, 0>
< PUNCTUATOR: LINEEND, 79, ; >
Single Line Comment
< KEYWORD: FOR, 14, for >
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< IDENTIFIER: 101, _varX>
< PUNCTUATOR: EQUAL, 39, = >
< CONSTANT: INTEGER, 103, 0>
< PUNCTUATOR: LINEEND, 79, ; >
< IDENTIFIER: 101, _varX>
< PUNCTUATOR: LESS THAN EQUAL, 69, <= >
< CONSTANT: INTEGER, 103, 1023>
< PUNCTUATOR: LINEEND, 79, ; >
< IDENTIFIER: 101, _varX>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, _varX>
< CONSTANT: INTEGER, 103, +1>
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< PUNCTUATOR: CURLY OPEN BRACKET, 51, { >
< KEYWORD: IF, 22, if >
< PUNCTUATOR: CIRCULAR OPEN BRACKET, 49, ( >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: MOD, 64, % >
< CONSTANT: INTEGER, 103, 33>
< PUNCTUATOR: EQUATE, 71, == >
< CONSTANT: INTEGER, 103, 12>
< PUNCTUATOR: CIRCULAR CLOSE BRACKET, 50, ) >
< IDENTIFIER: 101, func_count>
< PUNCTUATOR: EQUAL, 39, = >
< CONSTANT: INTEGER, 103, 20>
< PUNCTUATOR: LINEEND, 79, ; >
< KEYWORD: ELSE, 35, else >
< PUNCTUATOR: CURLY OPEN BRACKET, 51, { >
< IDENTIFIER: 101, var2>
< PUNCTUATOR: EQUAL, 39, = >
< IDENTIFIER: 101, var2>
< PUNCTUATOR: ADD, 59, + >
< CONSTANT: INTEGER, 103, 1>
< PUNCTUATOR: LINEEND, 79, ; >
< PUNCTUATOR: CURLY CLOSE BRACKET, 52, } >
< PUNCTUATOR: CURLY CLOSE BRACKET, 52, } >
< PUNCTUATOR: CURLY CLOSE BRACKET, 52, } >
