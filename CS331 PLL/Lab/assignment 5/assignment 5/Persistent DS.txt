Binary search tree (BST) persistent

Insertion:
Test case 1: Insert the value 5 into the original tree. Verify that the new tree has the value 5 in the correct position.
Test case 2: Insert the values 3, 5, 7 into the original tree. Verify that the new tree has the values 3, 5, 7 in the correct position.
Test case 3: Insert the values 5, 6, 4 into the original tree. Verify that the new tree has the values 4, 5, 6 in the correct order.
Deletion:
Test case 1: Delete the value 5 from the original tree. Verify that the new tree has the correct elements remaining, such as 4 and 6 in the correct position.
Test case 2: Delete the values 3, 5, 7 from the original tree. Verify that the new tree is empty.
Test case 3: Delete the value 8 from the original tree. Verify that the new tree is identical to the original tree.
Lookup:
Test case 1: Look up the value 5 in the original tree. Verify that the correct result (node or equivalent) is returned.
Test case 2: Look up the values 3, 5, 7 in the original tree. Verify that the correct results (nodes or equivalent) are returned.
Test case 3: Look up the value 8 in the original tree. Verify that the correct result (null or equivalent) is returned.
Versioning:
Test case 1: Create two versions of the same tree. Modify the second version by inserting the value 8. Verify that the first version is unchanged and the second version has the correct elements.
Test case 2: Create three versions of the same tree. Modify the second version by inserting the value 8, and modify the third version by deleting the value 6. Verify that each version has the correct elements in the correct position.
Test case 3: Create two different versions of the same tree. Compare them to verify that they have the correct differences based on the modifications made.
[Visualization through graphviz]

Linked list persistent:

Insertion:
Test case 1: Insert the value 5 into the original list. Verify that the new list has the value 5 in the correct position.
Test case 2: Insert the values 3, 5, 7 into the original list. Verify that the new list has the values 3, 5, 7 in the correct position.
Test case 3: Insert the values 5, 6, 4 into the original list. Verify that the new list has the values 5, 6, 4 in the correct order.
Deletion:
Test case 1: Delete the value 5 from the original list. Verify that the new list has the correct elements remaining, such as 4 and 6 in the correct position.
Test case 2: Delete the values 3, 5, 7 from the original list. Verify that the new list is empty.
Test case 3: Delete the value 8 from the original list. Verify that the new list is identical to the original list.
Lookup:
Test case 1: Look up the value 5 in the original list. Verify that the correct result (node or equivalent) is returned.
Test case 2: Look up the values 3, 5, 7 in the original list. Verify that the correct results (nodes or equivalent) are returned.
Test case 3: Look up the value 8 in the original list. Verify that the correct result (null or equivalent) is returned.
Versioning:
Test case 1: Create two versions of the same list. Modify the second version by inserting the value 8. Verify that the first version is unchanged and the second version has the correct elements.
Test case 2: Create three versions of the same list. Modify the second version by inserting the value 8, and modify the third version by deleting the value 6. Verify that each version has the correct elements in the correct position.
Test case 3: Create two different versions of the same list. Compare them to verify that they have the correct differences based on the modifications made.
[Visualization through graphviz]


Heap persistent:

Insertion:
Test case 1: Insert the value 5 into the original heap. Verify that the new heap has the value 5 in the correct position.
Test case 2: Insert the values 3, 5, 7 into the original heap. Verify that the new heap has the values 3, 5, 7 in the correct position.
Test case 3: Insert the values 5, 6, 4 into the original heap. Verify that the new heap has the values 5, 6, 4 in the correct order.
Deletion:
Test case 1: Delete the minimum value from the original heap. Verify that the new heap has the correct elements remaining and maintains the heap property.
Test case 2: Delete the values 3, 5, 7 from the original heap. Verify that the new heap has the correct elements remaining and maintains the heap property.
Test case 3: Delete the value 8 from the original heap. Verify that the new heap is identical to the original heap.
Lookup:
Test case 1: Look up the minimum value in the original heap. Verify that the correct result (value or equivalent) is returned.
Test case 2: Look up the values 3, 5, 7 in the original heap. Verify that the correct results (values or equivalent) are returned.
Test case 3: Look up the value 8 in the original heap. Verify that the correct result (null or equivalent) is returned.
Versioning:
Test case 1: Create two versions of the same heap. Modify the second version by inserting the value 8. Verify that the first version is unchanged and the second version has the correct elements and maintains the heap property.
Test case 2: Create three versions of the same heap. Modify the second version by inserting the value 8, and modify the third version by deleting the minimum value. Verify that each version has the correct elements in the correct position and maintains the heap property.
Test case 3: Create two different versions of the same heap. Compare them to verify that they have the correct differences based on the modifications made.
[Visualization through graphviz]